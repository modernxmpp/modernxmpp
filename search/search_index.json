{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Modern XMPP \u00b6 Overview \u00b6 Modern XMPP is an independent project launched to improve the quality of user-to-user messaging applications that use XMPP. XMPP is a mature open standard for internet messaging. If you are reading this, you have probably heard of it. We are developing a handful of simple documents aimed at people who wish to build on top of XMPP. The recommendations are derived from healthy discussions between developers from multiple XMPP projects and other members of the XMPP community. Our recommendations highlight only the XEPs you need to implement for a modern messaging application, ignoring historical cruft and excessive backwards-compatibility. We also intend to provide a comprehensive set of guidelines for UI and UX design. Developing a client was never just about the protocol. In fact in most cases the protocol is a secondary concern. Having a concrete set of guidelines will help to provide a more uniform user experience between different applications, ensuring they use the same terminology, and provide interoperable feature sets. Times change, and we expect our recommendations to evolve over time. Our guidelines will be versioned, and thus make it possible to identify and weed out software that falls behind the times. Current status \u00b6 It is early days. We are still building the foundations of what will become the initial set of documents. Nevertheless, we already have a bunch of stuff documented that developers of XMPP software (both new and experienced) will find useful. This includes design guidelines and lower-level protocol implementation recommendations . If you're interested in joining us, our primary discussion venue is our channel which can be reached at: XMPP: modernxmpp@rooms.modernxmpp.org Web: chat.modernxmpp.org Contributions to the docs can be made through Github modernxmpp/modernxmpp .","title":"Home"},{"location":"#modern-xmpp","text":"","title":"Modern XMPP"},{"location":"#overview","text":"Modern XMPP is an independent project launched to improve the quality of user-to-user messaging applications that use XMPP. XMPP is a mature open standard for internet messaging. If you are reading this, you have probably heard of it. We are developing a handful of simple documents aimed at people who wish to build on top of XMPP. The recommendations are derived from healthy discussions between developers from multiple XMPP projects and other members of the XMPP community. Our recommendations highlight only the XEPs you need to implement for a modern messaging application, ignoring historical cruft and excessive backwards-compatibility. We also intend to provide a comprehensive set of guidelines for UI and UX design. Developing a client was never just about the protocol. In fact in most cases the protocol is a secondary concern. Having a concrete set of guidelines will help to provide a more uniform user experience between different applications, ensuring they use the same terminology, and provide interoperable feature sets. Times change, and we expect our recommendations to evolve over time. Our guidelines will be versioned, and thus make it possible to identify and weed out software that falls behind the times.","title":"Overview"},{"location":"#current-status","text":"It is early days. We are still building the foundations of what will become the initial set of documents. Nevertheless, we already have a bunch of stuff documented that developers of XMPP software (both new and experienced) will find useful. This includes design guidelines and lower-level protocol implementation recommendations . If you're interested in joining us, our primary discussion venue is our channel which can be reached at: XMPP: modernxmpp@rooms.modernxmpp.org Web: chat.modernxmpp.org Contributions to the docs can be made through Github modernxmpp/modernxmpp .","title":"Current status"},{"location":"rationale/","text":"Rationale \u00b6 This page gives additional insight into why some of the recommendations in the Modern XMPP documentation are made. Group chats \u00b6 Discussion about the UI/UX issues around group chats initially happened at the first UX sprint . Some observations were made: MUC configuration is messy, for users and developers Most MUCs fall roughly into a couple of standard configurations Types of groups \u00b6 Software is about people. Good UX design is about understanding how people use the software. Group communication is a well-studied area of human interaction in general 1 . It has been noted by researchers that groups can fall into four different types 2 . Of the four group types, two are formed of people that share a personal or social connection (the so-called 'Primary' and 'Social' groups). Examples include families, groups of friends, colleagues or clubs. The other two group types ('Collective' and 'Category') are formed from people who share common traits, goals or interests. Such groups tend to be larger, less sticky, lack concrete social bonds and thus be more open. The developers of the Fractal IM client noted 3 the struggle they faced trying to design an ideal UI for chats in their Matrix client. They observed the two high-level categories which they termed \"Barbecue\" (small, social-focused, closed, trusted) and \"Banquet\" (large, topic-focused, open, untrusted). The Fractal developers went as far to consider two completely separate applications to cater for the two types of discussions. Many other modern messaging apps contain both types of group chat, but unlike most XMPP clients, they do distinguish them visually. From a protocol perspective this distinction is unnatural - XMPP, like similar open chat protocols such as IRC and Matrix cares little for how the group is used, and provides various fine-grained configuration options. Other than minor configuration tweaks there is little to distinguish the two use-cases at a technical level. However dividing these up at the UI level provides a number of advantages: Removes/reduces the need for fine-grained configuration options that users may not understand, or misuse Helps prevent user confusion when sharing content (it is harder to accidentally share family photos with an open-source project's chatroom full of strangers, if the family group and project group are strongly separated) Makes managing notification rules easier Terminology \u00b6 It was agreed that \"room\" terminology is outdated 4 , and not used by any modern messaging systems. This deprecates \"chat room\", \"occupant\", \"entering\", \"leaving\" and all room-related terminology. Most applications these days use the terms \"Chat\" (Messenger), \"Group\" (WhatsApp, Signal) or \"Channel\" (Slack, Discord, IRC). Primary options are: \"Chat\" Too ambiguous - clients may want to visually separate one-to-one chats from other kinds of chats, but if the term \"Chats\" is used for all of them, this is hard \"Group\" or \"Group Chat\" Widely understood due to its use in all the most popular messaging apps Even for those unfamiliar with such apps, \"group\" is a natural term for multiple people communicating together. Still ambiguous regarding whether the chat is of the private or public kind (see above for the rationale on why these are fundamentally different, and should be displayed and treated differently). If public and private chats are handled so differently, they should have different names. \"Group\" is already a term used by the roster, may be confusing \"Private Group Chat\" and \"Public Group Chat\" Too wordy, ambiguous without the modifier (Public/Private), and perhaps doesn't adequately capture the differences between public/private chats. \"Channel\" Successfully used by existing large platforms (mostly those focused primarily on group chats: Slack, Discord, IRC). Used by Telegram to mean something different: a one-way broadcast from one user to many Significantly different from 'Group Chat', no chance of confusion Unfamiliar to people who haven't already used other communication tools that use this term However, not a hard concept to grasp Difficult to translate to other languages - literal translations such as \"Kanal\" (de) don't necessarily make sense. https://en.wikipedia.org/wiki/Group_dynamics \u21a9 https://en.wikipedia.org/wiki/Group_dynamics#Types_of_groups \u21a9 https://blogs.gnome.org/tbernard/2018/05/16/banquets-and-barbecues/ \u21a9 Google Trends notes a significant decline since at least 2004 . \u21a9","title":"Rationale"},{"location":"rationale/#rationale","text":"This page gives additional insight into why some of the recommendations in the Modern XMPP documentation are made.","title":"Rationale"},{"location":"rationale/#group-chats","text":"Discussion about the UI/UX issues around group chats initially happened at the first UX sprint . Some observations were made: MUC configuration is messy, for users and developers Most MUCs fall roughly into a couple of standard configurations","title":"Group chats"},{"location":"rationale/#types-of-groups","text":"Software is about people. Good UX design is about understanding how people use the software. Group communication is a well-studied area of human interaction in general 1 . It has been noted by researchers that groups can fall into four different types 2 . Of the four group types, two are formed of people that share a personal or social connection (the so-called 'Primary' and 'Social' groups). Examples include families, groups of friends, colleagues or clubs. The other two group types ('Collective' and 'Category') are formed from people who share common traits, goals or interests. Such groups tend to be larger, less sticky, lack concrete social bonds and thus be more open. The developers of the Fractal IM client noted 3 the struggle they faced trying to design an ideal UI for chats in their Matrix client. They observed the two high-level categories which they termed \"Barbecue\" (small, social-focused, closed, trusted) and \"Banquet\" (large, topic-focused, open, untrusted). The Fractal developers went as far to consider two completely separate applications to cater for the two types of discussions. Many other modern messaging apps contain both types of group chat, but unlike most XMPP clients, they do distinguish them visually. From a protocol perspective this distinction is unnatural - XMPP, like similar open chat protocols such as IRC and Matrix cares little for how the group is used, and provides various fine-grained configuration options. Other than minor configuration tweaks there is little to distinguish the two use-cases at a technical level. However dividing these up at the UI level provides a number of advantages: Removes/reduces the need for fine-grained configuration options that users may not understand, or misuse Helps prevent user confusion when sharing content (it is harder to accidentally share family photos with an open-source project's chatroom full of strangers, if the family group and project group are strongly separated) Makes managing notification rules easier","title":"Types of groups"},{"location":"rationale/#terminology","text":"It was agreed that \"room\" terminology is outdated 4 , and not used by any modern messaging systems. This deprecates \"chat room\", \"occupant\", \"entering\", \"leaving\" and all room-related terminology. Most applications these days use the terms \"Chat\" (Messenger), \"Group\" (WhatsApp, Signal) or \"Channel\" (Slack, Discord, IRC). Primary options are: \"Chat\" Too ambiguous - clients may want to visually separate one-to-one chats from other kinds of chats, but if the term \"Chats\" is used for all of them, this is hard \"Group\" or \"Group Chat\" Widely understood due to its use in all the most popular messaging apps Even for those unfamiliar with such apps, \"group\" is a natural term for multiple people communicating together. Still ambiguous regarding whether the chat is of the private or public kind (see above for the rationale on why these are fundamentally different, and should be displayed and treated differently). If public and private chats are handled so differently, they should have different names. \"Group\" is already a term used by the roster, may be confusing \"Private Group Chat\" and \"Public Group Chat\" Too wordy, ambiguous without the modifier (Public/Private), and perhaps doesn't adequately capture the differences between public/private chats. \"Channel\" Successfully used by existing large platforms (mostly those focused primarily on group chats: Slack, Discord, IRC). Used by Telegram to mean something different: a one-way broadcast from one user to many Significantly different from 'Group Chat', no chance of confusion Unfamiliar to people who haven't already used other communication tools that use this term However, not a hard concept to grasp Difficult to translate to other languages - literal translations such as \"Kanal\" (de) don't necessarily make sense. https://en.wikipedia.org/wiki/Group_dynamics \u21a9 https://en.wikipedia.org/wiki/Group_dynamics#Types_of_groups \u21a9 https://blogs.gnome.org/tbernard/2018/05/16/banquets-and-barbecues/ \u21a9 Google Trends notes a significant decline since at least 2004 . \u21a9","title":"Terminology"},{"location":"terminology/","text":"Terminology \u00b6 To reduce user confusion when switching between clients, it is good to use only recommended terms. Historic/protocol terms Recommended user-facing terms MUC, Room, Chatroom, Conference Group chat or Channel 1 (see Multi-user Chats ) Occupant Participant JID Address or XMPP address Roster Contact list Avatar Profile picture Note: The recommendations only apply to user-facing text, such as application UIs and other content directed towards end users. There is no intent to change the language used by developers for discussing protocol elements 2 . This is why you will still see terms such as \"JID\" used across the developer-oriented documentation of this project, for example. Translation \u00b6 Most XMPP Clients are distributed in multiple languages. In the process of translating a client, people with various backgrounds (not necessarily XMPP-related) are contributing translations. This table of terms (German, French and Spanish to begin with) aims to be a reference for recommended translations in the future. At the moment, this table intends to support discussing the translation of key terms. Discuss with us! English term German French Spanish Portuguese Group chat Gruppenchat Groupe Grupo de chat Grupo de conversa Channel Channel Salon Canal Canal Participant Teilnehmer Participant Participantes Participantes Address or XMPP address XMPP-Adresse Adresse XMPP Direcci\u00f3n XMPP Endere\u00e7o XMPP Contact list Kontaktliste Liste de contacts Lista de contactos Lista de contactos Profile picture You\u2019ll find more terms in the term overview . Add a language... Rationale group chat terminology \u21a9 General agreement is that this would only cause confusion, for little gain. See e.g. discussion at https://github.com/modernxmpp/modernxmpp/pull/23 \u21a9","title":"Terminology"},{"location":"terminology/#terminology","text":"To reduce user confusion when switching between clients, it is good to use only recommended terms. Historic/protocol terms Recommended user-facing terms MUC, Room, Chatroom, Conference Group chat or Channel 1 (see Multi-user Chats ) Occupant Participant JID Address or XMPP address Roster Contact list Avatar Profile picture Note: The recommendations only apply to user-facing text, such as application UIs and other content directed towards end users. There is no intent to change the language used by developers for discussing protocol elements 2 . This is why you will still see terms such as \"JID\" used across the developer-oriented documentation of this project, for example.","title":"Terminology"},{"location":"terminology/#translation","text":"Most XMPP Clients are distributed in multiple languages. In the process of translating a client, people with various backgrounds (not necessarily XMPP-related) are contributing translations. This table of terms (German, French and Spanish to begin with) aims to be a reference for recommended translations in the future. At the moment, this table intends to support discussing the translation of key terms. Discuss with us! English term German French Spanish Portuguese Group chat Gruppenchat Groupe Grupo de chat Grupo de conversa Channel Channel Salon Canal Canal Participant Teilnehmer Participant Participantes Participantes Address or XMPP address XMPP-Adresse Adresse XMPP Direcci\u00f3n XMPP Endere\u00e7o XMPP Contact list Kontaktliste Liste de contacts Lista de contactos Lista de contactos Profile picture You\u2019ll find more terms in the term overview . Add a language... Rationale group chat terminology \u21a9 General agreement is that this would only cause confusion, for little gain. See e.g. discussion at https://github.com/modernxmpp/modernxmpp/pull/23 \u21a9","title":"Translation"},{"location":"translation-discussion/","text":"Translation discussion \u00b6 Most XMPP clients are distributed in multiple languages. In the process of translating a client, people with various backgrounds (not necessarily XMPP-related) are contributing translations. The following tables are gathering the various translations of key terms in (a limited set of) clients to give an overview about what is currently used. This document intends to serve as a basis to discuss recommendations for key term translations. Translation services used by clients \u00b6 Client Service Conversations Transifex converse.js Weblate Dino Weblate Gajim Weblate PSI(+) Transifex Swift swift.im git yaxim launchpad.net German \u00b6 Terms currently used in clients (German) \u00b6 Term \\ Client Conversations Converse.js Dino Gajim PSI(+) Swift.im yaxim XMPP address XMPP-Adresse XMPP-Adresse JID XMPP-Adresse JID JID, Jabber-ID JID contact list Kontaktliste Kontakte Kontaktliste Kontaktliste Kontaktliste Kontaktliste Liste? bookmarks Lesezeichen Lesezeichen - Gespeicherte Gruppenchats Lesezeichen Lesezeichen - auto join Auto-Join-Funktion automatisch beitreten - automatisch beitreten automatisch beitreten - - channel Channel Gruppenchat, Raum Kanal/Konferenz Gruppenchat Gruppenchat, Chatraum Chatraum Gruppenchat group chat Gruppenchat Gruppenchat Raum Gruppenchat Gruppenchat, Chatraum Chatraum Gruppenchat role ? Rechte, Rolle - Rolle Rolle, Funktion Rolle - moderator Moderator Moderator - Moderator Moderator Moderator - participant Teilnehmer Teilnehmer members ? Teilnehmer Teilnehmer Teilnehmer Teilnehmer kick ausschlie\u00dfen? hinauswerfen hinauswerfen rauswerfen rauswerfen rausschmei\u00dfen kick ban ausschlie\u00dfen? entfernen - sperren verbannen verbannen ban affiliation Rechte? Zugeh\u00f6rigkeit - Gruppenzugeh\u00f6rigkeit Mitgliedschaft, Angliederung Zugeh\u00f6rigkeit - owner Eigent\u00fcmer Eigent\u00fcmer Eigent\u00fcmer Eigent\u00fcmer Besitzer Besitzer - admin Administrator Admin Administrator Administrator Administrator Administrator - member Mitglied Mitglied Mitglied Mitglied Mitglied Mitglied - user - Besucher Gast - - - - nickname Nickname Spitzname, Nickname Spitzname Spitzname Spitzname Spitzname, Nickname Nickname history Verlauf - Gespr\u00e4chsverlauf Unterhaltungsverlauf Nachrichtenchronik Verlauf Chatverlauf, Unterhaltungsverlauf fingerprint Fingerabdruck Fingerabdruck Fingerabdruck Fingerabdruck Fingerabdruck - - subscription request Online-Status anfragen Kontaktanfrage 1 Kontaktanfrage Kontaktanfrage Anfrage Anfrage Abonnementanfrage subscription Online-Status Anwesenheitsabonnement - Abonnement Abonnement Abonnement - chat Unterhaltung Chat Unterhaltung Chat Chat Chat (Unterhaltung) read receipts Lese- und Empfangsbest\u00e4tigung - Lesebest\u00e4tigungen Empfangsbest\u00e4tigungen \u00dcbermittlungsbest\u00e4tigung Empfangsbest\u00e4tigung - typing notifications Tipp-Benachrichtigung - Tippbenachrichtigungen Chatstatus Tipp-Benachrichtigung - - avatar Avatar Avatarbild - Kontaktbild Avatar Bild - Recommended translation \u00b6 Term Translation XMPP address contact list bookmarks auto join ... French \u00b6 Terms currently used in clients (French) \u00b6 Term \\ Client Conversations Converse.js Dino Gajim PSI(+) Swift.im yaxim channel Canal Salon Salon Salon (de discussion) Salon Salon group chat Conversation de groupe Salon Salon Salon (de discussion) Salon Salon Notes for french translations (from pep.) \u00b6 English French group chat groupe (de discussion) channel salon (de discussion) participant participant XMPP address Adresse XMPP contact list Liste de contact Subscription requests in converse.js are called contact requests \u21a9","title":"Translation discussion"},{"location":"translation-discussion/#translation-discussion","text":"Most XMPP clients are distributed in multiple languages. In the process of translating a client, people with various backgrounds (not necessarily XMPP-related) are contributing translations. The following tables are gathering the various translations of key terms in (a limited set of) clients to give an overview about what is currently used. This document intends to serve as a basis to discuss recommendations for key term translations.","title":"Translation discussion"},{"location":"translation-discussion/#translation-services-used-by-clients","text":"Client Service Conversations Transifex converse.js Weblate Dino Weblate Gajim Weblate PSI(+) Transifex Swift swift.im git yaxim launchpad.net","title":"Translation services used by clients"},{"location":"translation-discussion/#german","text":"","title":"German"},{"location":"translation-discussion/#terms-currently-used-in-clients-german","text":"Term \\ Client Conversations Converse.js Dino Gajim PSI(+) Swift.im yaxim XMPP address XMPP-Adresse XMPP-Adresse JID XMPP-Adresse JID JID, Jabber-ID JID contact list Kontaktliste Kontakte Kontaktliste Kontaktliste Kontaktliste Kontaktliste Liste? bookmarks Lesezeichen Lesezeichen - Gespeicherte Gruppenchats Lesezeichen Lesezeichen - auto join Auto-Join-Funktion automatisch beitreten - automatisch beitreten automatisch beitreten - - channel Channel Gruppenchat, Raum Kanal/Konferenz Gruppenchat Gruppenchat, Chatraum Chatraum Gruppenchat group chat Gruppenchat Gruppenchat Raum Gruppenchat Gruppenchat, Chatraum Chatraum Gruppenchat role ? Rechte, Rolle - Rolle Rolle, Funktion Rolle - moderator Moderator Moderator - Moderator Moderator Moderator - participant Teilnehmer Teilnehmer members ? Teilnehmer Teilnehmer Teilnehmer Teilnehmer kick ausschlie\u00dfen? hinauswerfen hinauswerfen rauswerfen rauswerfen rausschmei\u00dfen kick ban ausschlie\u00dfen? entfernen - sperren verbannen verbannen ban affiliation Rechte? Zugeh\u00f6rigkeit - Gruppenzugeh\u00f6rigkeit Mitgliedschaft, Angliederung Zugeh\u00f6rigkeit - owner Eigent\u00fcmer Eigent\u00fcmer Eigent\u00fcmer Eigent\u00fcmer Besitzer Besitzer - admin Administrator Admin Administrator Administrator Administrator Administrator - member Mitglied Mitglied Mitglied Mitglied Mitglied Mitglied - user - Besucher Gast - - - - nickname Nickname Spitzname, Nickname Spitzname Spitzname Spitzname Spitzname, Nickname Nickname history Verlauf - Gespr\u00e4chsverlauf Unterhaltungsverlauf Nachrichtenchronik Verlauf Chatverlauf, Unterhaltungsverlauf fingerprint Fingerabdruck Fingerabdruck Fingerabdruck Fingerabdruck Fingerabdruck - - subscription request Online-Status anfragen Kontaktanfrage 1 Kontaktanfrage Kontaktanfrage Anfrage Anfrage Abonnementanfrage subscription Online-Status Anwesenheitsabonnement - Abonnement Abonnement Abonnement - chat Unterhaltung Chat Unterhaltung Chat Chat Chat (Unterhaltung) read receipts Lese- und Empfangsbest\u00e4tigung - Lesebest\u00e4tigungen Empfangsbest\u00e4tigungen \u00dcbermittlungsbest\u00e4tigung Empfangsbest\u00e4tigung - typing notifications Tipp-Benachrichtigung - Tippbenachrichtigungen Chatstatus Tipp-Benachrichtigung - - avatar Avatar Avatarbild - Kontaktbild Avatar Bild -","title":"Terms currently used in clients (German)"},{"location":"translation-discussion/#recommended-translation","text":"Term Translation XMPP address contact list bookmarks auto join ...","title":"Recommended translation"},{"location":"translation-discussion/#french","text":"","title":"French"},{"location":"translation-discussion/#terms-currently-used-in-clients-french","text":"Term \\ Client Conversations Converse.js Dino Gajim PSI(+) Swift.im yaxim channel Canal Salon Salon Salon (de discussion) Salon Salon group chat Conversation de groupe Salon Salon Salon (de discussion) Salon Salon","title":"Terms currently used in clients (French)"},{"location":"translation-discussion/#notes-for-french-translations-from-pep","text":"English French group chat groupe (de discussion) channel salon (de discussion) participant participant XMPP address Adresse XMPP contact list Liste de contact Subscription requests in converse.js are called contact requests \u21a9","title":"Notes for french translations (from pep.)"},{"location":"client/design/","text":"Client design guidelines \u00b6 This document lays out a set of guidelines for designing Modern XMPP clients. For contributions, please open an issue or pull request at Github for discussion. Registration \u00b6 Todo Initial configuration \u00b6 At initial startup, a client should present a welcome screen, to prompt the user for their JID, and a password. Optionally, a button or link to provide other forms of credentials may be included. If the client has an out-of-band configuration mechanism, or it can query the OS for sensible defaults, it may use these. Configuration options \u00b6 List recommended configuration options. Account \u00b6 Option Description JID The user's JID Password The user's password Network \u00b6 Support for these options is OPTIONAL, but not recommended. They are only needed for testing/development purposes or working around misconfigured server deployments. If included in the client, they MUST NOT be requested by default at startup, but should be accessible through an advanced options interface. Option Description Connect host The network hostname to connect to Connect port The network port to connect to TLS Mode 2 Multiple choice: \"STARTTLS\" or \"Direct TLS\" Both of the above should be automatically discovered from DNS, according to the rules in RFC 6120 . Clients that support other connection mechanisms, such as BOSH, SHOULD also implement XEP-0156 . Deprecated options \u00b6 Support for these options is NOT RECOMMENDED. Option Description Notes Resource The resource to request from the server see Resource generation Priority The priority to include in presence 0 User status \u00b6 The client, by default, MUST NOT include any status messages in its presence, unless they are chosen by the user. Built-in status messages that convey the same meaning as the user's selected 'show' value (e.g. \"Available\", \"Do not disturb\") are not allowed. Allowing the user to set a status message is an OPTIONAL feature. Contact list \u00b6 Terminology \u00b6 In its interface, the client MUST NOT use the technical term \"roster\", but MUST instead use the term \"contact list\" (or a suitable translation) where necessary. See the main \"Terminology\" section for more information. Offline contacts \u00b6 The client MUST display offline contacts by default, and allow sending messages to them, as for online contacts.. Sorting of contact list \u00b6 The client MUST sort the contact list. Either in lexicographical order by contact name or chronologically by the time of the last message exchanged with that contact. Note Historically, some clients have sorted by presence (available, offline, busy, etc.) as a secondary sorting category. Due to the rise in mobile clients which always consider themselves \"available\", presence is not always a reliable indicator that a contact is available to chat. If sorting chronologically and/or by presence, clients MUST NOT rearrange the contacts list while fetching history, or when the contact list has focus. The definition of \"focus\" depends on the context, but may be the cursor hovering over the list, the list pane being visible, or the list being selected in a screen reader or during tab selection. Visualizing status \u00b6 The client MUST display status messages of contacts when present. It MAY also provide visual indication of the contact's status ('show'), but SHOULD NOT rely on color alone to distinguish different status values 1 . Todo Describe how to display multiple remote resources. Conversation view \u00b6 Message states \u00b6 Outgoing messages \u00b6 A client must be able to unambiguously display the following outgoing message states: Message pending delivery Message delivered to server Message delivered to contact Message read by contact Delivery error for message Todo Add table or flowchart Notifications \u00b6 Carbons, notifications for new messages in MAM Error handling \u00b6 Obey error types (modify, cancel, wait, etc.) Do display error text Multiple accounts \u00b6 Support for multiple accounts is OPTIONAL. Todo Research recommendations for the best way to handle multiple accounts. E.g. merge contacts, or not. Not required. Describe how to display multiple accounts in a single client? Group chat \u00b6 You can find more details about group chats here . Documentation \u00b6 Clients should have documentation covering essential functionality, including: Todo List of recommended documentation topics, e.g. how to add a contact Privacy \u00b6 Clients must not reveal full JID. Don't query unsubscribed contacts. Todo Probably belongs in protocol reference. Probably some things relevant to UI that should be mentioned, however. Names \u00b6 When displaying messages received from a remote JID, either within a one-to-one or multi-user chat, clients need to show a human-readable name for that sender. There are multiple sources for such a display name, which depend on the context (e.g. whether the conversation is one-to-one or a group chat). Name sources \u00b6 Valid sources are: Roster If the contact is in the user's roster, and the user has set a custom name. Address book Platform-dependent. If the application is somehow linked to the user's address book and is able to access a contact's information there. User nickname A nickname published by the sender in PEP per XEP-0172 . Resource The resource of the sending JID. Local part The part of a bare JID before the '@' symbol. Bare JID The sending JID with any resource removed. Contexts \u00b6 The kind of view where a name is displayed decides which sources should be used. Since most sources are optional, they should be checked in the order described by the table below, displaying the first one available. View type Name priorities Conversation - normal Roster name, (Address book), User nickname, Local part Conversation - group Roster name, (Address book), User nickname, Resource (*) Conversation - channel Resource Contact list Roster name, User nickname, Bare JID User profile Roster name, User nickname, Bare JID (*) Mentions refer to resource. if you do proper references you can live replace it with the 'nice' name. Avatar display should follow the same order Auto-generated colors \u00b6 A client may want to associate a color with a user. Example use cases for this include, but are not limited to: Dummy avatars in contexts where an avatar cannot be or has not yet been retrieved Coloring the user name in a conversation log (be aware that this needs to be done very carefully to be accessible!) To generate a color for a user, the algorithm described in XEP-0392 MUST be used. Generator input based on context \u00b6 The generator described in XEP-0392 needs a text input to operate and for which a deterministic color will be generated. The following table lists which strings to use as input for the generator: View type Generator Input Conversation - normal Normalised Bare JID Conversation - group Normalised Bare JID Conversation - channel Resource Contact list Normalised Bare JID User profile Normalised Bare JID Contrast ratio considerations \u00b6 To provide a good contrast ratio for accessibility of the resulting user interface, the guidelines from 1 should be obeyed. XEP-0392 intentionally allows the implementation to pick a saturation and lightness value based on the environment to allow for high contrast. Contrast considerations apply between the generated color and the background, as well as for text rendered on top of the generated color (for example in a dummy avatar). Resources for the use of color in interface design: WCAG 2.1: Understanding Use of Color Color contrast checker \u21a9 \u21a9 This is presented as a multiple-choice option. A checkbox labeled e.g. \"Direct TLS\" may confuse users by implying that the opposite of \"Direct TLS\" is potentially \"No TLS\". Security is not an option, and TLS is always used. This option is about what style the server supports. \u21a9","title":"User Interface"},{"location":"client/design/#client-design-guidelines","text":"This document lays out a set of guidelines for designing Modern XMPP clients. For contributions, please open an issue or pull request at Github for discussion.","title":"Client design guidelines"},{"location":"client/design/#registration","text":"Todo","title":"Registration"},{"location":"client/design/#initial-configuration","text":"At initial startup, a client should present a welcome screen, to prompt the user for their JID, and a password. Optionally, a button or link to provide other forms of credentials may be included. If the client has an out-of-band configuration mechanism, or it can query the OS for sensible defaults, it may use these.","title":"Initial configuration"},{"location":"client/design/#configuration-options","text":"List recommended configuration options.","title":"Configuration options"},{"location":"client/design/#account","text":"Option Description JID The user's JID Password The user's password","title":"Account"},{"location":"client/design/#network","text":"Support for these options is OPTIONAL, but not recommended. They are only needed for testing/development purposes or working around misconfigured server deployments. If included in the client, they MUST NOT be requested by default at startup, but should be accessible through an advanced options interface. Option Description Connect host The network hostname to connect to Connect port The network port to connect to TLS Mode 2 Multiple choice: \"STARTTLS\" or \"Direct TLS\" Both of the above should be automatically discovered from DNS, according to the rules in RFC 6120 . Clients that support other connection mechanisms, such as BOSH, SHOULD also implement XEP-0156 .","title":"Network"},{"location":"client/design/#deprecated-options","text":"Support for these options is NOT RECOMMENDED. Option Description Notes Resource The resource to request from the server see Resource generation Priority The priority to include in presence 0","title":"Deprecated options"},{"location":"client/design/#user-status","text":"The client, by default, MUST NOT include any status messages in its presence, unless they are chosen by the user. Built-in status messages that convey the same meaning as the user's selected 'show' value (e.g. \"Available\", \"Do not disturb\") are not allowed. Allowing the user to set a status message is an OPTIONAL feature.","title":"User status"},{"location":"client/design/#contact-list","text":"","title":"Contact list"},{"location":"client/design/#terminology","text":"In its interface, the client MUST NOT use the technical term \"roster\", but MUST instead use the term \"contact list\" (or a suitable translation) where necessary. See the main \"Terminology\" section for more information.","title":"Terminology"},{"location":"client/design/#offline-contacts","text":"The client MUST display offline contacts by default, and allow sending messages to them, as for online contacts..","title":"Offline contacts"},{"location":"client/design/#sorting-of-contact-list","text":"The client MUST sort the contact list. Either in lexicographical order by contact name or chronologically by the time of the last message exchanged with that contact. Note Historically, some clients have sorted by presence (available, offline, busy, etc.) as a secondary sorting category. Due to the rise in mobile clients which always consider themselves \"available\", presence is not always a reliable indicator that a contact is available to chat. If sorting chronologically and/or by presence, clients MUST NOT rearrange the contacts list while fetching history, or when the contact list has focus. The definition of \"focus\" depends on the context, but may be the cursor hovering over the list, the list pane being visible, or the list being selected in a screen reader or during tab selection.","title":"Sorting of contact list"},{"location":"client/design/#visualizing-status","text":"The client MUST display status messages of contacts when present. It MAY also provide visual indication of the contact's status ('show'), but SHOULD NOT rely on color alone to distinguish different status values 1 . Todo Describe how to display multiple remote resources.","title":"Visualizing status"},{"location":"client/design/#conversation-view","text":"","title":"Conversation view"},{"location":"client/design/#message-states","text":"","title":"Message states"},{"location":"client/design/#outgoing-messages","text":"A client must be able to unambiguously display the following outgoing message states: Message pending delivery Message delivered to server Message delivered to contact Message read by contact Delivery error for message Todo Add table or flowchart","title":"Outgoing messages"},{"location":"client/design/#notifications","text":"Carbons, notifications for new messages in MAM","title":"Notifications"},{"location":"client/design/#error-handling","text":"Obey error types (modify, cancel, wait, etc.) Do display error text","title":"Error handling"},{"location":"client/design/#multiple-accounts","text":"Support for multiple accounts is OPTIONAL. Todo Research recommendations for the best way to handle multiple accounts. E.g. merge contacts, or not. Not required. Describe how to display multiple accounts in a single client?","title":"Multiple accounts"},{"location":"client/design/#group-chat","text":"You can find more details about group chats here .","title":"Group chat"},{"location":"client/design/#documentation","text":"Clients should have documentation covering essential functionality, including: Todo List of recommended documentation topics, e.g. how to add a contact","title":"Documentation"},{"location":"client/design/#privacy","text":"Clients must not reveal full JID. Don't query unsubscribed contacts. Todo Probably belongs in protocol reference. Probably some things relevant to UI that should be mentioned, however.","title":"Privacy"},{"location":"client/design/#names","text":"When displaying messages received from a remote JID, either within a one-to-one or multi-user chat, clients need to show a human-readable name for that sender. There are multiple sources for such a display name, which depend on the context (e.g. whether the conversation is one-to-one or a group chat).","title":"Names"},{"location":"client/design/#name-sources","text":"Valid sources are: Roster If the contact is in the user's roster, and the user has set a custom name. Address book Platform-dependent. If the application is somehow linked to the user's address book and is able to access a contact's information there. User nickname A nickname published by the sender in PEP per XEP-0172 . Resource The resource of the sending JID. Local part The part of a bare JID before the '@' symbol. Bare JID The sending JID with any resource removed.","title":"Name sources"},{"location":"client/design/#contexts","text":"The kind of view where a name is displayed decides which sources should be used. Since most sources are optional, they should be checked in the order described by the table below, displaying the first one available. View type Name priorities Conversation - normal Roster name, (Address book), User nickname, Local part Conversation - group Roster name, (Address book), User nickname, Resource (*) Conversation - channel Resource Contact list Roster name, User nickname, Bare JID User profile Roster name, User nickname, Bare JID (*) Mentions refer to resource. if you do proper references you can live replace it with the 'nice' name. Avatar display should follow the same order","title":"Contexts"},{"location":"client/design/#auto-generated-colors","text":"A client may want to associate a color with a user. Example use cases for this include, but are not limited to: Dummy avatars in contexts where an avatar cannot be or has not yet been retrieved Coloring the user name in a conversation log (be aware that this needs to be done very carefully to be accessible!) To generate a color for a user, the algorithm described in XEP-0392 MUST be used.","title":"Auto-generated colors"},{"location":"client/design/#generator-input-based-on-context","text":"The generator described in XEP-0392 needs a text input to operate and for which a deterministic color will be generated. The following table lists which strings to use as input for the generator: View type Generator Input Conversation - normal Normalised Bare JID Conversation - group Normalised Bare JID Conversation - channel Resource Contact list Normalised Bare JID User profile Normalised Bare JID","title":"Generator input based on context"},{"location":"client/design/#contrast-ratio-considerations","text":"To provide a good contrast ratio for accessibility of the resulting user interface, the guidelines from 1 should be obeyed. XEP-0392 intentionally allows the implementation to pick a saturation and lightness value based on the environment to allow for high contrast. Contrast considerations apply between the generated color and the background, as well as for text rendered on top of the generated color (for example in a dummy avatar). Resources for the use of color in interface design: WCAG 2.1: Understanding Use of Color Color contrast checker \u21a9 \u21a9 This is presented as a multiple-choice option. A checkbox labeled e.g. \"Direct TLS\" may confuse users by implying that the opposite of \"Direct TLS\" is potentially \"No TLS\". Security is not an option, and TLS is always used. This option is about what style the server supports. \u21a9","title":"Contrast ratio considerations"},{"location":"client/groupchat/","text":"Multi-user Chats \u00b6 Types of chat \u00b6 There are two kinds of multi-user chat. Private group chats , and public channels 1 . Properties \u00b6 To detect if a multi-user chat is a group chat or a channel MUC Configuration variable (1) Group chat Disco Feature (2) Channel Disco Feature (2) Persistent muc#roomconfig_persistentroom Yes muc_persistent Yes muc_persistent MAM enabled Prosody muc#roomconfig_enablearchiving ejabberd community : mam ejabberd saas muc#roomconfig_mam Yes urn:xmpp:mam:2 Yes urn:xmpp:mam:2 Subject editable muc#roomconfig_changesubject No muc#roomconfig_changesubject to false No muc#roomconfig_changesubject to false Members-only muc#roomconfig_membersonly Yes (3) muc_membersonly No muc_open JIDs revealed muc#roomconfig_whois Yes (3) muc_nonanonymous No muc_semianonymous Publicly listed muc#roomconfig_publicroom No (3) muc_hidden Yes muc_public PMs muc#roomconfig_allowpm No (3) muc#roomconfig_allowpm to none Yes muc#roomconfig_allowpm to anyone (1) As defined in XEP-0045: Multi-User Chat - 16.5.3 (2) As defined in XEP-0045: Multi-User Chat - 16.3 (3) Immutable for group chats . Options marked (3) Immutable should be used when creating group chats, and also as a means of detection. These options may be hidden or greyed out in a configuration dialog. The other options are recommendations. About PMs \u00b6 While it is possible to entirely prevent PMs from being sent with muc#roomconfig_allowpm , clients should prefer using JIDs when muc#roomconfig_whois is set to anyone . In channels, if the initiating client has access to revealed JIDs (with muc#roomconfig_whois set to moderators ), clients may want to refrain from using them to prevent disclosing the JID of the user initiating the chat, unless the recipient already knows them from another venue (e.g., the recipient is in their roster). Terminology \u00b6 People in the group chat / channel : Participants Roles are not displayed and cannot be modified through the UI. Affiliations In group chats In channels none N/A ** Guest member - - admin Admin (*) Admin owner Owner Owner (*) A group chat will display an existing admin as such but it will not encourage/allow someone to be promoted to admin. UI options in group chats only allow a member to become an owner but not admin. So admins are discouraged by the UI but will be displayed as such if they end up being one for some reason. (**) Everybody is a member in group chats Clients MAY create an 'advanced view' that displays roles as well. User nickname \u00b6 When joining a group chat, a client needs to select a nickname to use. There are multiple sources from which this name may be selected. The client should use the following sources in order: Bookmark If the chat is present in the user's bookmarks and has a nickname present (as the resource). Reserved name A chat may be queried to fetch the name that is registered by the user for that chat. User nickname (PEP) The name stored in the user's account according to XEP-0172 . User nickname (vCard) The name stored in the user's vCard as NICKNAME . Local nickname (Optional, not recommended 2 ) A nickname previously configured by the user in this client instance. JID username The username portion of the user's JID (i.e. before the '@'). Other user's names \u00b6 The display of other user's names is covered in the general UI recommendations . Bookmarks \u00b6 Figuring out which group chats to join is the client\u2019s job. For that it should store the list of group chats to rejoin automatically on the server, named bookmarks. Three possible protocols exist for this: XEP-0402 which is the current preferred method XEP-0048 1.1 , recently deprecated but still in use by some clients XEP-0048 1.0 , in wide use, based on XEP-0049 In order to see the same set of bookmarks as every other client the user might be using, it is recommended to implement XEP-0048 1.0 first and foremost when the user's account may be shared with other clients. This legacy protocol however doesn\u2019t support notifications when the bookmarks change due to another client or the server. To avoid this issue, a modern client should also implement XEP-0402 (\"PEP Native Bookmarks\"), but use it only if the account advertises 'urn:xmpp:bookmarks:1#compat' (as defined in XEP-0402 paragraph 5.3 Compatibility ). Implementing XEP-0048 1.1 is not recommended in modern clients. The following table summarizes the implementation recommendations described in this section: XEP Implement Use XEP-0048 1.0 (Private XML storage) Yes (for backwards compatibility) When urn:xmpp:bookmarks:1#compat is not advertised by the server on the user's account. XEP-0048 1.1 (PEP storage, single-item) No (deprecated in favour of XEP-0402) Never XEP-0402 (PEP storage, multi-item) Yes When urn:xmpp:bookmarks:1#compat is advertised by the server on the user's account. Private messages \u00b6 Clients must always use real JIDs for messaging privately within a group chat if (and only if) JIDs are publicly visible to all participants. 3 Rationale group chats \u21a9 To avoid requiring the user to configure a nickname manually on each device, shared cross-device stores such as PEP and vCard should be preferred. \u21a9 If real JIDs are known to all participants, it is preferable to use that for private communication to avoid confusion. Through-MUC PMs have the following disadvantages: Only work while connected to the group chat Do not interact well with multiple devices (e.g. not all of a recipient's devices may be in a group chat) Can cause confusion if talking to the same person through different views (e.g. if the person is already a contact in your roster, and you already have a chat open with them) However if the sending user is an admin of a room where JIDs are hidden, using a real JID will reveal the admin's private JID to the recipient. Either warn the sender that their JID will be revealed, or always use the in-room JID in such channels. \u21a9","title":"Multi-user Chats"},{"location":"client/groupchat/#multi-user-chats","text":"","title":"Multi-user Chats"},{"location":"client/groupchat/#types-of-chat","text":"There are two kinds of multi-user chat. Private group chats , and public channels 1 .","title":"Types of chat"},{"location":"client/groupchat/#properties","text":"To detect if a multi-user chat is a group chat or a channel MUC Configuration variable (1) Group chat Disco Feature (2) Channel Disco Feature (2) Persistent muc#roomconfig_persistentroom Yes muc_persistent Yes muc_persistent MAM enabled Prosody muc#roomconfig_enablearchiving ejabberd community : mam ejabberd saas muc#roomconfig_mam Yes urn:xmpp:mam:2 Yes urn:xmpp:mam:2 Subject editable muc#roomconfig_changesubject No muc#roomconfig_changesubject to false No muc#roomconfig_changesubject to false Members-only muc#roomconfig_membersonly Yes (3) muc_membersonly No muc_open JIDs revealed muc#roomconfig_whois Yes (3) muc_nonanonymous No muc_semianonymous Publicly listed muc#roomconfig_publicroom No (3) muc_hidden Yes muc_public PMs muc#roomconfig_allowpm No (3) muc#roomconfig_allowpm to none Yes muc#roomconfig_allowpm to anyone (1) As defined in XEP-0045: Multi-User Chat - 16.5.3 (2) As defined in XEP-0045: Multi-User Chat - 16.3 (3) Immutable for group chats . Options marked (3) Immutable should be used when creating group chats, and also as a means of detection. These options may be hidden or greyed out in a configuration dialog. The other options are recommendations.","title":"Properties"},{"location":"client/groupchat/#about-pms","text":"While it is possible to entirely prevent PMs from being sent with muc#roomconfig_allowpm , clients should prefer using JIDs when muc#roomconfig_whois is set to anyone . In channels, if the initiating client has access to revealed JIDs (with muc#roomconfig_whois set to moderators ), clients may want to refrain from using them to prevent disclosing the JID of the user initiating the chat, unless the recipient already knows them from another venue (e.g., the recipient is in their roster).","title":"About PMs"},{"location":"client/groupchat/#terminology","text":"People in the group chat / channel : Participants Roles are not displayed and cannot be modified through the UI. Affiliations In group chats In channels none N/A ** Guest member - - admin Admin (*) Admin owner Owner Owner (*) A group chat will display an existing admin as such but it will not encourage/allow someone to be promoted to admin. UI options in group chats only allow a member to become an owner but not admin. So admins are discouraged by the UI but will be displayed as such if they end up being one for some reason. (**) Everybody is a member in group chats Clients MAY create an 'advanced view' that displays roles as well.","title":"Terminology"},{"location":"client/groupchat/#user-nickname","text":"When joining a group chat, a client needs to select a nickname to use. There are multiple sources from which this name may be selected. The client should use the following sources in order: Bookmark If the chat is present in the user's bookmarks and has a nickname present (as the resource). Reserved name A chat may be queried to fetch the name that is registered by the user for that chat. User nickname (PEP) The name stored in the user's account according to XEP-0172 . User nickname (vCard) The name stored in the user's vCard as NICKNAME . Local nickname (Optional, not recommended 2 ) A nickname previously configured by the user in this client instance. JID username The username portion of the user's JID (i.e. before the '@').","title":"User nickname"},{"location":"client/groupchat/#other-users-names","text":"The display of other user's names is covered in the general UI recommendations .","title":"Other user's names"},{"location":"client/groupchat/#bookmarks","text":"Figuring out which group chats to join is the client\u2019s job. For that it should store the list of group chats to rejoin automatically on the server, named bookmarks. Three possible protocols exist for this: XEP-0402 which is the current preferred method XEP-0048 1.1 , recently deprecated but still in use by some clients XEP-0048 1.0 , in wide use, based on XEP-0049 In order to see the same set of bookmarks as every other client the user might be using, it is recommended to implement XEP-0048 1.0 first and foremost when the user's account may be shared with other clients. This legacy protocol however doesn\u2019t support notifications when the bookmarks change due to another client or the server. To avoid this issue, a modern client should also implement XEP-0402 (\"PEP Native Bookmarks\"), but use it only if the account advertises 'urn:xmpp:bookmarks:1#compat' (as defined in XEP-0402 paragraph 5.3 Compatibility ). Implementing XEP-0048 1.1 is not recommended in modern clients. The following table summarizes the implementation recommendations described in this section: XEP Implement Use XEP-0048 1.0 (Private XML storage) Yes (for backwards compatibility) When urn:xmpp:bookmarks:1#compat is not advertised by the server on the user's account. XEP-0048 1.1 (PEP storage, single-item) No (deprecated in favour of XEP-0402) Never XEP-0402 (PEP storage, multi-item) Yes When urn:xmpp:bookmarks:1#compat is advertised by the server on the user's account.","title":"Bookmarks"},{"location":"client/groupchat/#private-messages","text":"Clients must always use real JIDs for messaging privately within a group chat if (and only if) JIDs are publicly visible to all participants. 3 Rationale group chats \u21a9 To avoid requiring the user to configure a nickname manually on each device, shared cross-device stores such as PEP and vCard should be preferred. \u21a9 If real JIDs are known to all participants, it is preferable to use that for private communication to avoid confusion. Through-MUC PMs have the following disadvantages: Only work while connected to the group chat Do not interact well with multiple devices (e.g. not all of a recipient's devices may be in a group chat) Can cause confusion if talking to the same person through different views (e.g. if the person is already a contact in your roster, and you already have a chat open with them) However if the sending user is an admin of a room where JIDs are hidden, using a real JID will reveal the admin's private JID to the recipient. Either warn the sender that their JID will be revealed, or always use the in-room JID in such channels. \u21a9","title":"Private messages"},{"location":"client/invites/","text":"Registration through invitation \u00b6 Invitation types \u00b6 Account-only \u00b6 Invitation to register an account on a given domain: xmpp:example.com?register;preauth=3c7efeafc1bb10d034 or an invitation to register an account with a specific username only: xmpp:romeo@example.com?register;preauth=3c7efeafc1bb10d034 See the Registration protocol section of this document for how to handle this type of invitation. Subscription-only \u00b6 A potential contact invites you to communicate with them: xmpp:contact@example.com?roster;preauth=3c7efeafc1bb10d034 The protocol to handle this type of invitation is specified in XEP-0379: Pre-authenticated Roster Subscriptions . After following the protocol, you will have a mutual presence subscription with contact@example.com . If the user does not currently have an account, the client must walk them through the account registration process on a suitable XMPP service. Account-and-subscription \u00b6 The same as a subscription-only invite, but it indicates you are able to use the token to also register an account on the contact's domain, signalled by the presence of ibr=y in the URI parameters: xmpp:contact@example.com?roster;preauth=3c7efeafc1bb10d034;ibr=y If the recipient of such an invite does not yet have an account, the client should follow the Registration protocol section of this document. After completing the registration, the user will automatically be subscribed to the sender of the invitation. If the recipient already has an XMPP account, the invitation should be handled the same as a subscription-only invitation documented above, and follow the protocol defined in XEP-0379 . Registration protocol \u00b6 Server sends stream features: <stream:features> <mechanisms xmlns='urn:xmpp:sasl:0'> <mechanism>EXTERNAL</mechanism> <mechanism>SCRAM-SHA-1-PLUS</mechanism> <mechanism>SCRAM-SHA-1</mechanism> <mechanism>PLAIN</mechanism> </mechanisms> <register xmlns='urn:xmpp:invite'/> <register xmlns='http://jabber.org/features/iq-register'/> </stream:features> Client sees that registration through token is supported, and initiates the registration flow: <iq type=\"set\" to=\"example.com\" id=\"pa1\"> <preauth xmlns='urn:xmpp:pars:0' token='3c7efeafc1bb10d034' /> </iq> Upon receiving the preauth request, the server should validate that the token is acceptable for account registration. However single-use tokens MUST NOT be considered used until the actual registration has succeeded. In addition, if the token has an expiration time, it MUST only be checked at this point. Subsequent actions performed by the client during the current session that require a valid token MUST NOT be rejected due to token expiry. Server responds with success, and indicates the client may now proceed with account registration: <iq type=\"result\" from=\"example.com\" id=\"pa1\" /> If the token provided by the client was unknown, invalid or expired, the server should return an appropriate error to the client: <iq type=\"error\" from=\"example.com\" id=\"pa1\"> <error type='cancel'> <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/> <text>The provided token is invalid or expired</text> </error> </iq> In the success case, the client proceeds with registration using e.g. XEP-0077 in the normal way. Creating an invitation \u00b6 Users may request an invite (suitable for sharing to a desired new contact) by using the ad-hoc command defined in XEP-0401: Easy User Onboarding . The server will provide at minimum an xmpp: URI that can be interpreted by any compatible XMPP client. However this URI SHOULD NOT be shared directly by clients. It is generally likely that the recipient of an invite does not yet have an XMPP client installed and configured. If the server provides a landing-url in the response, the client SHOULD share this URL with contacts. Otherwise it SHOULD use the URI in combination with a landing page (which may be hosted by the client developer or other entity) to generate a https:// URL suitable for sharing. An example landing page can be found at ge0rg/easy-xmpp-invitation . Sharing the URL can be done by visually displaying a QR code on the user's screen (if the contact is in physical proximity) or e.g. through the platform's own sharing mechanism (to share via SMS, email, social apps, etc.) Guidance for landing pages \u00b6 As well as embedding the XMPP URI in a visually obvious clickable/tappable element (e.g. a button), it should include text and download links for compatible XMPP clients. If it is possible for a particular platform's download links to automatically relay the xmpp: URI to the installed app, that should be implemented. See for example Google Play Install Referrer . If possible, platform detection should be used to highlight download links relevant to the user's current platform. If the detected platform is a desktop environment, consider also adding a QR code for easy transmission to a user's mobile device.","title":"Registration through invitation"},{"location":"client/invites/#registration-through-invitation","text":"","title":"Registration through invitation"},{"location":"client/invites/#invitation-types","text":"","title":"Invitation types"},{"location":"client/invites/#account-only","text":"Invitation to register an account on a given domain: xmpp:example.com?register;preauth=3c7efeafc1bb10d034 or an invitation to register an account with a specific username only: xmpp:romeo@example.com?register;preauth=3c7efeafc1bb10d034 See the Registration protocol section of this document for how to handle this type of invitation.","title":"Account-only"},{"location":"client/invites/#subscription-only","text":"A potential contact invites you to communicate with them: xmpp:contact@example.com?roster;preauth=3c7efeafc1bb10d034 The protocol to handle this type of invitation is specified in XEP-0379: Pre-authenticated Roster Subscriptions . After following the protocol, you will have a mutual presence subscription with contact@example.com . If the user does not currently have an account, the client must walk them through the account registration process on a suitable XMPP service.","title":"Subscription-only"},{"location":"client/invites/#account-and-subscription","text":"The same as a subscription-only invite, but it indicates you are able to use the token to also register an account on the contact's domain, signalled by the presence of ibr=y in the URI parameters: xmpp:contact@example.com?roster;preauth=3c7efeafc1bb10d034;ibr=y If the recipient of such an invite does not yet have an account, the client should follow the Registration protocol section of this document. After completing the registration, the user will automatically be subscribed to the sender of the invitation. If the recipient already has an XMPP account, the invitation should be handled the same as a subscription-only invitation documented above, and follow the protocol defined in XEP-0379 .","title":"Account-and-subscription"},{"location":"client/invites/#registration-protocol","text":"Server sends stream features: <stream:features> <mechanisms xmlns='urn:xmpp:sasl:0'> <mechanism>EXTERNAL</mechanism> <mechanism>SCRAM-SHA-1-PLUS</mechanism> <mechanism>SCRAM-SHA-1</mechanism> <mechanism>PLAIN</mechanism> </mechanisms> <register xmlns='urn:xmpp:invite'/> <register xmlns='http://jabber.org/features/iq-register'/> </stream:features> Client sees that registration through token is supported, and initiates the registration flow: <iq type=\"set\" to=\"example.com\" id=\"pa1\"> <preauth xmlns='urn:xmpp:pars:0' token='3c7efeafc1bb10d034' /> </iq> Upon receiving the preauth request, the server should validate that the token is acceptable for account registration. However single-use tokens MUST NOT be considered used until the actual registration has succeeded. In addition, if the token has an expiration time, it MUST only be checked at this point. Subsequent actions performed by the client during the current session that require a valid token MUST NOT be rejected due to token expiry. Server responds with success, and indicates the client may now proceed with account registration: <iq type=\"result\" from=\"example.com\" id=\"pa1\" /> If the token provided by the client was unknown, invalid or expired, the server should return an appropriate error to the client: <iq type=\"error\" from=\"example.com\" id=\"pa1\"> <error type='cancel'> <item-not-found xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/> <text>The provided token is invalid or expired</text> </error> </iq> In the success case, the client proceeds with registration using e.g. XEP-0077 in the normal way.","title":"Registration protocol"},{"location":"client/invites/#creating-an-invitation","text":"Users may request an invite (suitable for sharing to a desired new contact) by using the ad-hoc command defined in XEP-0401: Easy User Onboarding . The server will provide at minimum an xmpp: URI that can be interpreted by any compatible XMPP client. However this URI SHOULD NOT be shared directly by clients. It is generally likely that the recipient of an invite does not yet have an XMPP client installed and configured. If the server provides a landing-url in the response, the client SHOULD share this URL with contacts. Otherwise it SHOULD use the URI in combination with a landing page (which may be hosted by the client developer or other entity) to generate a https:// URL suitable for sharing. An example landing page can be found at ge0rg/easy-xmpp-invitation . Sharing the URL can be done by visually displaying a QR code on the user's screen (if the contact is in physical proximity) or e.g. through the platform's own sharing mechanism (to share via SMS, email, social apps, etc.)","title":"Creating an invitation"},{"location":"client/invites/#guidance-for-landing-pages","text":"As well as embedding the XMPP URI in a visually obvious clickable/tappable element (e.g. a button), it should include text and download links for compatible XMPP clients. If it is possible for a particular platform's download links to automatically relay the xmpp: URI to the installed app, that should be implemented. See for example Google Play Install Referrer . If possible, platform detection should be used to highlight download links relevant to the user's current platform. If the detected platform is a desktop environment, consider also adding a QR code for easy transmission to a user's mobile device.","title":"Guidance for landing pages"},{"location":"client/protocol/","text":"XMPP Protocol Guidelines \u00b6 Overview \u00b6 The XSF has published over 400 XEPs over many years. However as technology, user expectations and best practices evolve, the protocol too is always evolving. This leads to confusion about which set of XEPs are \"current\", which are required only for backwards-compatibility, and which serve only to document experimental protocols that never made it off the drawing board. Instead of focusing on XEP numbers, this document simply focuses on the different areas of functionality, and describes the currently-recommended XEPs that should be used to implement each. Notes are provided to provide context about past and future versions of the protocol, which may be helpful for backwards-compatibility or planning future development. Target audience \u00b6 The protocols discussed here should be implemented in reusable libraries. Client developers may use this document to assist them in choosing an XMPP library, or submitting feature requests or contributions to their library of choice. Reusing libraries whenever possible reduces fragmentation and duplicated effort. Core \u00b6 Service discovery \u00b6 One of the unique features of XMPP is its ability to support a diverse range of software on a single network, yet always allow basic functionality to work. Either due to the ongoing evolution of technology, or due to constrained environments (e.g. IoT) or usage restrictions (e.g. accessibility), different XMPP software may support different sets of features on top of the core messaging and presence functionality described in the RFCs. It is often useful to know what features a remote entity supports before performing some operation. For example when deciding whether to send formatted messages, or determining the best available method of transferring a file. XEP-0030 is the basic mechanism for advertising and discovering features XEP-0115 is a strongly recommended extension that allows caching of these features Notes \u00b6 XEP-0115 may be revised or replaced at some point in the future, such as by XEP-0390 , to allow hash agility and making the algorithm more robust to cache poisoning attacks. Resource generation \u00b6 The client should generate a unique random identifier per device or client instance. The identifier should be reused between sessions, and should not reveal any information about the user, their device, or their location. Messaging \u00b6 This section covers some protocols that are useful for general messaging. Formatting \u00b6 The current recommendation is that developers may simply implement the rules in XEP-0393 for formatting message bodies that they receive. XHTML-IM deprecation \u00b6 A previous formatting specification defined in XEP-0071 has been deprecated. Many implementations failed to properly sanitize the formatted payload (it's tricky), leading to security issues (particularly in web applications). Implementation of XEP-0071 is not encouraged, but if formatting is a strong requirement along with backwards compatibility (many clients still implement it currently), it remains an option if careful attention is given to sanitizing the XHTML before display. Consider using xhtml-im.js in a web client, or as a reference. Multi-device \u00b6 XMPP was ahead of its time in supporting multiple devices connected to a single account - although interestingly even today some popular messaging systems are still limited to a single device, typically mobile, even when many people have a mobile, tablet and laptop or desktop. Historically XMPP aimed to determine which device the user most likely wanted to receive messages on - it did this using a 'priority' mechanism in presence. Over time bandwidth and CPU costs, as well as user expectations, have shifted. Today most people want an \"everything everywhere\" approach to messaging, where all their devices are in sync. Modern XMPP clients should not set a priority in their presence, and they should implement the following XEPs: XEP-0280 : Message Carbons - for \"live\" synchronization of conversations between online devices XEP-0313 : Message Archive Management - for \"catch-up\" of messages that were exchanged while a device was offline Known issues \u00b6 There are currently some minor open issues regarding these protocols that developers should be aware of. Race during login \u00b6 There is a race condition during login between Carbons and MAM. If you synchronize with the archive first, you may miss some messages sent to other devices before you enable Carbons. If you enable Carbons first, you may receive duplicates from the archive of messages you already received. The current best solution is to enable Carbons, perform the query, and de-duplicate any received messages before presentation to the user. This issue will be solved in the future through XEP-0386 or an alternative atomic \"fetch and subscribe\" command. IDs of outgoing messages \u00b6 When a client sends a message, it is not currently possible for it to discover the ID that the server assigned to the message in the archive. This means that it is unable to use them as synchronization points and therefore it may receive its last outgoing message(s) when performing an archive sync. Example: Client receives message A, and records the ID so it can use Client sends message B, but the ID is not known to the client Client goes offline Client comes online, and tries to sync with archive. Last known ID was of message A, so it synchronizes from that point Server responds to the sync with message B, and all subsequent messages. Solving this issue may happen through an extension of Carbons (to reflect sent messages back to the sender with the ID added and any other additional info), or through a new MAM subscription protocol. Mobile \u00b6 There are some special considerations that mobile clients can make to increase battery life and reduce data consumption. XEP-0286 - informational XEP providing advice to mobile developers on efficient data usage XEP-0352 - used to inform the server of whether the client is currently active/focused (which allows the server to prioritize traffic) Reliability \u00b6 In the real world, it is normal for clients to get briefly disconnected. These extensions deal with ensuring reliable message delivery and reporting. XEP-0184 - end-to-end acknowledgement, i.e. the recipient has successfully received the message XEP-0198 - hop-to-hop acknowledgement, and allows efficient resume of broken connections without data loss Read state synchronization \u00b6 [Multi-device][#multi-device] support is all well and good but one thing that further improves the experience is not having to dismiss notifications and unread counters for messages that have already been read on another device. XEP-0280 : Carbon copies of replies, implying that prior messages have been read. XEP-0333 : Chat Markers - to signal that messages have been shown to the user. Notifications \u00b6 Avoid notifications while activity from another client is detected via Carbons. Combine with Chat Marker tracking to determine whether to notify after activity ceases, with some timeout. File transfer \u00b6 Transferring a file from A to B is surprisingly a non-trivial problem for the internet, it seems. A number of approaches have been tried in XMPP. They are documented here, and fall into two categories: peer-to-peer and server-mediated. It is strongly recommended for clients to implement HTTP upload to provide the best user experience. The other mechanisms are optional (the advantages of implementing each one are documented in the relevant section). There are three file transfer methods that a modern XMPP client may implement: HTTP upload (required) Jingle streams (recommended for large file support) Stream initiation (deprecated, but may be implemented for backwards-compatibility) HTTP upload \u00b6 Required: yes The newest file transfer mechanism available, described in XEP-0363 . It is strongly recommended to implement this mechanism to provide the best user experience. Benefits \u00b6 Does not depend on the recipient supporting it (simply falls back to sending a URL) Works with group chats Works when the recipient is offline Allows the recipient to receive on multiple devices Disadvantages \u00b6 Unsuitable for large files (server determines what the size limit is, and may enforce usage quotas) Does not support streaming (file must be entirely uploaded to the server before recipient can begin to receive it) Requires server support Communicating the URL \u00b6 After uploading the file successfully, the sender should communicate the URL to the recipient by sending a <message> stanza with the \"Get URL\" provided by the server in the <body> of the message. Additionally the sender should include a jabber:x:oob element in the message stanza with the same URL. Note To enable automatic display of media in the conversation view, Conversations (at least) currently requires that the <body> contain just the URL, and it must be identical to the URL in the jabber:x:oob payload. The <desc> element is not used or supported by Conversations. This behavior means that it is not possible for any text to directly accompany a media file, and must be sent separately. Jingle \u00b6 Required: optional - used for large file support Jingle is a generic framework that allows clients to negotiate a direct stream between themselves, which can be used to transfer files (it is also used for voice/video and other p2p applications based on XMPP). It was originally developed at Google and contributed to the XSF where it evolved into today's standard. Because it is a generic framework that supports different underlying transports and different media types, Jingle is split into multiple XEPs. For file transfer the following are relevant: XEP-0166 - the core Jingle framework XEP-0234 - the Jingle file transfer definition XEP-0260 - the most common transport mechanism for files (SOCKS5 Bytestreams - may be directly peer-to-peer or server-mediated) XEP-0261 - a fallback transport for tunneling the data directly over the XMPP stream (inefficient and slow, but always succeeds) Advantages \u00b6 Supports streaming (recipient receives at the same time as the sender sends) Allows code re-use if the client also implements Jingle for audio/video streams No server-side storage required, and the data will pass directly between clients if firewalls/network conditions allow, which makes it suitable for larger files. Disadvantages \u00b6 Because it is a multi-purpose framework it can be complex. Not all clients support it. In the case of the recipient having multiple devices, only a single one can receive the file. Does not work for sharing a file with multiple people (e.g. in a group chat) Only works if the recipient is online Note Although it is the only recommended negotiation protocol for peer-to-peer streams today, note that Jingle support is not nearly universal even among modern clients. Stream Initiation (pre-Jingle) \u00b6 Required: no - optionally implement for sending large files to pre-Jingle clients XEP-0096 describes the stream negotiation protocol that was used before Jingle. It is widely supported, and can use the same transports: XEP-0065 XEP-0047 It is not recommended to implement this mechanism in new clients, except for compatibility with older clients is required (and HTTP Upload does not suffice for some reason). Advantages \u00b6 Supports streaming (recipient receives at the same time as the sender sends) Widely supported in older clients Disadvantages \u00b6 Deprecated. Modern clients are switching to Jingle negotiation. In the case of the recipient having multiple devices, only a single one can receive the file. Does not work for sharing a file with multiple people (e.g. in a group chat) Only works if the recipient is online User Profiles \u00b6 XEP-0163 is the base publishing method. XEP-0222 for access controls. XEP-0084 for profile picture. XEP-0172 for nickname. XEP-0292 for extended details (optional). Simpler clients may choose to only use XEP-0084 and XEP-0172 to provide a limited user profile, while more advanced clients could publish more details via XEP-0292. Avatars \u00b6 Do publish avatars via XEP-0084. Do not publish avatars via XEP-0292. Format and size considerations \u00b6 Use widely supported format such as PNG or JPEG. The avatar must fit within stanza size restrictions, after being base64-encoded and wrapped in protocol. Recommended to keep the avatar no larger than 72 KiB which would keep resulting stanzas under 100 KiB. Access control \u00b6 Data published via XEP-0163 would by default be available only to the user's contacts. Historically, profiles published via the legacy XEP-0054 method were public. Modern PEP implementations should implement for 'access model' as described by XEP-0222 , and allow users to share or limit their personal details as they choose. Access model for both XEP-0084 nodes and the XEP-0172 node should be kept the same. Access to the full XEP-0292 profile, if supported, may be configured separately or via a tri-state such as: Everything contacts only Public picture and nickname, private profile Everything public Legacy \u00b6 XEP-0054 is the legacy profile publishing method. XEP-0153 notifies contacts about avatar changes. XEP-0398 tells you whether you can ignore that and let the server do it for you. Group chat \u00b6 See Group Chat . Contact management \u00b6 Blocking \u00b6 XEP-0191 for blocking communication with a list of other JIDs Encryption \u00b6 All XMPP streams must be encrypted using TLS as specified in RFC 6920. Clients may additionally support encrypting messages within the XMPP stream. This can prevent untrusted servers from viewing or modifying the contents of exchanged messages, and is known as 'end-to-end encryption'. The current preferred protocol for this in XMPP is OMEMO, specified in XEP-0384 . Client support is indicated at https://omemo.top/ . Notes \u00b6 OTR \u00b6 Prior to OMEMO, many clients implemented the protocol-agnostic encryption protocol \"OTR\". Although it sufficed for simple use cases (sender and recipient have a single device connected, and both support OTR), it has a number of drawbacks when used within XMPP. Traditionally it has not supported multiple devices very well, nor group chats, and it only protects the message body. These issues lead to a poor user experience. Modern XMPP clients that implement OTR must add a XEP-0380 tag to their outgoing messages. MLS \u00b6 The IETF is currently working on standardizing a new protocol for 'Message Layer Security' with support from a number of prominent members of the online communications space. It is hopeful that it may one day allow messaging applications of all protocols to share code and crypto reviewed by experts. However this work is in its early days, and OMEMO is expected to be the recommended approach for some time to come.","title":"Protocol"},{"location":"client/protocol/#xmpp-protocol-guidelines","text":"","title":"XMPP Protocol Guidelines"},{"location":"client/protocol/#overview","text":"The XSF has published over 400 XEPs over many years. However as technology, user expectations and best practices evolve, the protocol too is always evolving. This leads to confusion about which set of XEPs are \"current\", which are required only for backwards-compatibility, and which serve only to document experimental protocols that never made it off the drawing board. Instead of focusing on XEP numbers, this document simply focuses on the different areas of functionality, and describes the currently-recommended XEPs that should be used to implement each. Notes are provided to provide context about past and future versions of the protocol, which may be helpful for backwards-compatibility or planning future development.","title":"Overview"},{"location":"client/protocol/#target-audience","text":"The protocols discussed here should be implemented in reusable libraries. Client developers may use this document to assist them in choosing an XMPP library, or submitting feature requests or contributions to their library of choice. Reusing libraries whenever possible reduces fragmentation and duplicated effort.","title":"Target audience"},{"location":"client/protocol/#core","text":"","title":"Core"},{"location":"client/protocol/#service-discovery","text":"One of the unique features of XMPP is its ability to support a diverse range of software on a single network, yet always allow basic functionality to work. Either due to the ongoing evolution of technology, or due to constrained environments (e.g. IoT) or usage restrictions (e.g. accessibility), different XMPP software may support different sets of features on top of the core messaging and presence functionality described in the RFCs. It is often useful to know what features a remote entity supports before performing some operation. For example when deciding whether to send formatted messages, or determining the best available method of transferring a file. XEP-0030 is the basic mechanism for advertising and discovering features XEP-0115 is a strongly recommended extension that allows caching of these features","title":"Service discovery"},{"location":"client/protocol/#notes","text":"XEP-0115 may be revised or replaced at some point in the future, such as by XEP-0390 , to allow hash agility and making the algorithm more robust to cache poisoning attacks.","title":"Notes"},{"location":"client/protocol/#resource-generation","text":"The client should generate a unique random identifier per device or client instance. The identifier should be reused between sessions, and should not reveal any information about the user, their device, or their location.","title":"Resource generation"},{"location":"client/protocol/#messaging","text":"This section covers some protocols that are useful for general messaging.","title":"Messaging"},{"location":"client/protocol/#formatting","text":"The current recommendation is that developers may simply implement the rules in XEP-0393 for formatting message bodies that they receive.","title":"Formatting"},{"location":"client/protocol/#xhtml-im-deprecation","text":"A previous formatting specification defined in XEP-0071 has been deprecated. Many implementations failed to properly sanitize the formatted payload (it's tricky), leading to security issues (particularly in web applications). Implementation of XEP-0071 is not encouraged, but if formatting is a strong requirement along with backwards compatibility (many clients still implement it currently), it remains an option if careful attention is given to sanitizing the XHTML before display. Consider using xhtml-im.js in a web client, or as a reference.","title":"XHTML-IM deprecation"},{"location":"client/protocol/#multi-device","text":"XMPP was ahead of its time in supporting multiple devices connected to a single account - although interestingly even today some popular messaging systems are still limited to a single device, typically mobile, even when many people have a mobile, tablet and laptop or desktop. Historically XMPP aimed to determine which device the user most likely wanted to receive messages on - it did this using a 'priority' mechanism in presence. Over time bandwidth and CPU costs, as well as user expectations, have shifted. Today most people want an \"everything everywhere\" approach to messaging, where all their devices are in sync. Modern XMPP clients should not set a priority in their presence, and they should implement the following XEPs: XEP-0280 : Message Carbons - for \"live\" synchronization of conversations between online devices XEP-0313 : Message Archive Management - for \"catch-up\" of messages that were exchanged while a device was offline","title":"Multi-device"},{"location":"client/protocol/#known-issues","text":"There are currently some minor open issues regarding these protocols that developers should be aware of.","title":"Known issues"},{"location":"client/protocol/#race-during-login","text":"There is a race condition during login between Carbons and MAM. If you synchronize with the archive first, you may miss some messages sent to other devices before you enable Carbons. If you enable Carbons first, you may receive duplicates from the archive of messages you already received. The current best solution is to enable Carbons, perform the query, and de-duplicate any received messages before presentation to the user. This issue will be solved in the future through XEP-0386 or an alternative atomic \"fetch and subscribe\" command.","title":"Race during login"},{"location":"client/protocol/#ids-of-outgoing-messages","text":"When a client sends a message, it is not currently possible for it to discover the ID that the server assigned to the message in the archive. This means that it is unable to use them as synchronization points and therefore it may receive its last outgoing message(s) when performing an archive sync. Example: Client receives message A, and records the ID so it can use Client sends message B, but the ID is not known to the client Client goes offline Client comes online, and tries to sync with archive. Last known ID was of message A, so it synchronizes from that point Server responds to the sync with message B, and all subsequent messages. Solving this issue may happen through an extension of Carbons (to reflect sent messages back to the sender with the ID added and any other additional info), or through a new MAM subscription protocol.","title":"IDs of outgoing messages"},{"location":"client/protocol/#mobile","text":"There are some special considerations that mobile clients can make to increase battery life and reduce data consumption. XEP-0286 - informational XEP providing advice to mobile developers on efficient data usage XEP-0352 - used to inform the server of whether the client is currently active/focused (which allows the server to prioritize traffic)","title":"Mobile"},{"location":"client/protocol/#reliability","text":"In the real world, it is normal for clients to get briefly disconnected. These extensions deal with ensuring reliable message delivery and reporting. XEP-0184 - end-to-end acknowledgement, i.e. the recipient has successfully received the message XEP-0198 - hop-to-hop acknowledgement, and allows efficient resume of broken connections without data loss","title":"Reliability"},{"location":"client/protocol/#read-state-synchronization","text":"[Multi-device][#multi-device] support is all well and good but one thing that further improves the experience is not having to dismiss notifications and unread counters for messages that have already been read on another device. XEP-0280 : Carbon copies of replies, implying that prior messages have been read. XEP-0333 : Chat Markers - to signal that messages have been shown to the user.","title":"Read state synchronization"},{"location":"client/protocol/#notifications","text":"Avoid notifications while activity from another client is detected via Carbons. Combine with Chat Marker tracking to determine whether to notify after activity ceases, with some timeout.","title":"Notifications"},{"location":"client/protocol/#file-transfer","text":"Transferring a file from A to B is surprisingly a non-trivial problem for the internet, it seems. A number of approaches have been tried in XMPP. They are documented here, and fall into two categories: peer-to-peer and server-mediated. It is strongly recommended for clients to implement HTTP upload to provide the best user experience. The other mechanisms are optional (the advantages of implementing each one are documented in the relevant section). There are three file transfer methods that a modern XMPP client may implement: HTTP upload (required) Jingle streams (recommended for large file support) Stream initiation (deprecated, but may be implemented for backwards-compatibility)","title":"File transfer"},{"location":"client/protocol/#http-upload","text":"Required: yes The newest file transfer mechanism available, described in XEP-0363 . It is strongly recommended to implement this mechanism to provide the best user experience.","title":"HTTP upload"},{"location":"client/protocol/#benefits","text":"Does not depend on the recipient supporting it (simply falls back to sending a URL) Works with group chats Works when the recipient is offline Allows the recipient to receive on multiple devices","title":"Benefits"},{"location":"client/protocol/#disadvantages","text":"Unsuitable for large files (server determines what the size limit is, and may enforce usage quotas) Does not support streaming (file must be entirely uploaded to the server before recipient can begin to receive it) Requires server support","title":"Disadvantages"},{"location":"client/protocol/#communicating-the-url","text":"After uploading the file successfully, the sender should communicate the URL to the recipient by sending a <message> stanza with the \"Get URL\" provided by the server in the <body> of the message. Additionally the sender should include a jabber:x:oob element in the message stanza with the same URL. Note To enable automatic display of media in the conversation view, Conversations (at least) currently requires that the <body> contain just the URL, and it must be identical to the URL in the jabber:x:oob payload. The <desc> element is not used or supported by Conversations. This behavior means that it is not possible for any text to directly accompany a media file, and must be sent separately.","title":"Communicating the URL"},{"location":"client/protocol/#jingle","text":"Required: optional - used for large file support Jingle is a generic framework that allows clients to negotiate a direct stream between themselves, which can be used to transfer files (it is also used for voice/video and other p2p applications based on XMPP). It was originally developed at Google and contributed to the XSF where it evolved into today's standard. Because it is a generic framework that supports different underlying transports and different media types, Jingle is split into multiple XEPs. For file transfer the following are relevant: XEP-0166 - the core Jingle framework XEP-0234 - the Jingle file transfer definition XEP-0260 - the most common transport mechanism for files (SOCKS5 Bytestreams - may be directly peer-to-peer or server-mediated) XEP-0261 - a fallback transport for tunneling the data directly over the XMPP stream (inefficient and slow, but always succeeds)","title":"Jingle"},{"location":"client/protocol/#advantages","text":"Supports streaming (recipient receives at the same time as the sender sends) Allows code re-use if the client also implements Jingle for audio/video streams No server-side storage required, and the data will pass directly between clients if firewalls/network conditions allow, which makes it suitable for larger files.","title":"Advantages"},{"location":"client/protocol/#disadvantages_1","text":"Because it is a multi-purpose framework it can be complex. Not all clients support it. In the case of the recipient having multiple devices, only a single one can receive the file. Does not work for sharing a file with multiple people (e.g. in a group chat) Only works if the recipient is online Note Although it is the only recommended negotiation protocol for peer-to-peer streams today, note that Jingle support is not nearly universal even among modern clients.","title":"Disadvantages"},{"location":"client/protocol/#stream-initiation-pre-jingle","text":"Required: no - optionally implement for sending large files to pre-Jingle clients XEP-0096 describes the stream negotiation protocol that was used before Jingle. It is widely supported, and can use the same transports: XEP-0065 XEP-0047 It is not recommended to implement this mechanism in new clients, except for compatibility with older clients is required (and HTTP Upload does not suffice for some reason).","title":"Stream Initiation (pre-Jingle)"},{"location":"client/protocol/#advantages_1","text":"Supports streaming (recipient receives at the same time as the sender sends) Widely supported in older clients","title":"Advantages"},{"location":"client/protocol/#disadvantages_2","text":"Deprecated. Modern clients are switching to Jingle negotiation. In the case of the recipient having multiple devices, only a single one can receive the file. Does not work for sharing a file with multiple people (e.g. in a group chat) Only works if the recipient is online","title":"Disadvantages"},{"location":"client/protocol/#user-profiles","text":"XEP-0163 is the base publishing method. XEP-0222 for access controls. XEP-0084 for profile picture. XEP-0172 for nickname. XEP-0292 for extended details (optional). Simpler clients may choose to only use XEP-0084 and XEP-0172 to provide a limited user profile, while more advanced clients could publish more details via XEP-0292.","title":"User Profiles"},{"location":"client/protocol/#avatars","text":"Do publish avatars via XEP-0084. Do not publish avatars via XEP-0292.","title":"Avatars"},{"location":"client/protocol/#format-and-size-considerations","text":"Use widely supported format such as PNG or JPEG. The avatar must fit within stanza size restrictions, after being base64-encoded and wrapped in protocol. Recommended to keep the avatar no larger than 72 KiB which would keep resulting stanzas under 100 KiB.","title":"Format and size considerations"},{"location":"client/protocol/#access-control","text":"Data published via XEP-0163 would by default be available only to the user's contacts. Historically, profiles published via the legacy XEP-0054 method were public. Modern PEP implementations should implement for 'access model' as described by XEP-0222 , and allow users to share or limit their personal details as they choose. Access model for both XEP-0084 nodes and the XEP-0172 node should be kept the same. Access to the full XEP-0292 profile, if supported, may be configured separately or via a tri-state such as: Everything contacts only Public picture and nickname, private profile Everything public","title":"Access control"},{"location":"client/protocol/#legacy","text":"XEP-0054 is the legacy profile publishing method. XEP-0153 notifies contacts about avatar changes. XEP-0398 tells you whether you can ignore that and let the server do it for you.","title":"Legacy"},{"location":"client/protocol/#group-chat","text":"See Group Chat .","title":"Group chat"},{"location":"client/protocol/#contact-management","text":"","title":"Contact management"},{"location":"client/protocol/#blocking","text":"XEP-0191 for blocking communication with a list of other JIDs","title":"Blocking"},{"location":"client/protocol/#encryption","text":"All XMPP streams must be encrypted using TLS as specified in RFC 6920. Clients may additionally support encrypting messages within the XMPP stream. This can prevent untrusted servers from viewing or modifying the contents of exchanged messages, and is known as 'end-to-end encryption'. The current preferred protocol for this in XMPP is OMEMO, specified in XEP-0384 . Client support is indicated at https://omemo.top/ .","title":"Encryption"},{"location":"client/protocol/#notes_1","text":"","title":"Notes"},{"location":"client/protocol/#otr","text":"Prior to OMEMO, many clients implemented the protocol-agnostic encryption protocol \"OTR\". Although it sufficed for simple use cases (sender and recipient have a single device connected, and both support OTR), it has a number of drawbacks when used within XMPP. Traditionally it has not supported multiple devices very well, nor group chats, and it only protects the message body. These issues lead to a poor user experience. Modern XMPP clients that implement OTR must add a XEP-0380 tag to their outgoing messages.","title":"OTR"},{"location":"client/protocol/#mls","text":"The IETF is currently working on standardizing a new protocol for 'Message Layer Security' with support from a number of prominent members of the online communications space. It is hopeful that it may one day allow messaging applications of all protocols to share code and crypto reviewed by experts. However this work is in its early days, and OMEMO is expected to be the recommended approach for some time to come.","title":"MLS"},{"location":"client/sync/","text":"Syncing Message History \u00b6 MAM Strategies \u00b6 Fetching history from the server is accomplished with Message Archive Management (MAM). New XMPP clients frequently use na\u00efve methods of querying history that result in long wait times for history, or frozen UIs. However, a robust strategy for fetching history has not been previously documented. This section documents strategies used by clients in the wild, as well as implementation recommendations for MAM. Requirements \u00b6 Allow the user to send a message in response to history fetched from the server as quickly as possible Do not generate dozens of notifications for old messages Implementation Notes \u00b6 Don't treat history like normal incoming messages. If querying lots of messages, aggregate and commit them to the data store (assuming a transactional database) as a group. Do the same for updating the UI and displaying notifications (ie. display one notification, not dozens or perhaps hundreds as messages come in). Look up the last message in your datastore before sending initial presence, otherwise you may receive a message before you get the last ID and end up with a gap. If using paging, committing one page at a time to the DB/UI is a natural way to break up large transactions and provide the user with quicker feeling updates. If mam:2#extended is supported, query using after-id and before-id and fall back to using the time of the last or earliest message ( start and end ) if not. Communiqu\u00e9 \u00b6 On client start iterate through all items in the roster If no messages exist in the local archive: Query in reverse order (in case the server breaks it up by page and we end up committing pages separately) with end: now && limit: X (where X is some configurable number or a guess at a page number based on screen size, etc.) Else: Query with after-id: <last message> or start: <last message time> (making sure that the last message was pulled from the DB before we send initial presence) If the user scrolls to the top: Query in reverse order with before-id: <first message> && limit: X or end: <first message time> && limit: X","title":"Syncing Message History"},{"location":"client/sync/#syncing-message-history","text":"","title":"Syncing Message History"},{"location":"client/sync/#mam-strategies","text":"Fetching history from the server is accomplished with Message Archive Management (MAM). New XMPP clients frequently use na\u00efve methods of querying history that result in long wait times for history, or frozen UIs. However, a robust strategy for fetching history has not been previously documented. This section documents strategies used by clients in the wild, as well as implementation recommendations for MAM.","title":"MAM Strategies"},{"location":"client/sync/#requirements","text":"Allow the user to send a message in response to history fetched from the server as quickly as possible Do not generate dozens of notifications for old messages","title":"Requirements"},{"location":"client/sync/#implementation-notes","text":"Don't treat history like normal incoming messages. If querying lots of messages, aggregate and commit them to the data store (assuming a transactional database) as a group. Do the same for updating the UI and displaying notifications (ie. display one notification, not dozens or perhaps hundreds as messages come in). Look up the last message in your datastore before sending initial presence, otherwise you may receive a message before you get the last ID and end up with a gap. If using paging, committing one page at a time to the DB/UI is a natural way to break up large transactions and provide the user with quicker feeling updates. If mam:2#extended is supported, query using after-id and before-id and fall back to using the time of the last or earliest message ( start and end ) if not.","title":"Implementation Notes"},{"location":"client/sync/#communique","text":"On client start iterate through all items in the roster If no messages exist in the local archive: Query in reverse order (in case the server breaks it up by page and we end up committing pages separately) with end: now && limit: X (where X is some configurable number or a guess at a page number based on screen size, etc.) Else: Query with after-id: <last message> or start: <last message time> (making sure that the last message was pulled from the DB before we send initial presence) If the user scrolls to the top: Query in reverse order with before-id: <first message> && limit: X or end: <first message time> && limit: X","title":"Communiqu\u00e9"},{"location":"meetings/2019-01-brussels/","text":"UX Sprint (January 2019, Brussels) \u00b6 These are the archived notes from the Jan 2019 Brussels sprint, which focused primarily on discussing various UX issues facing the community as a whole. There is an associated wiki page . The notes were taken in real-time by volunteers during the discussions. As such, they are far from editorially perfect, and are not intended as documentation. Relevant items around which consensus was formed are either already merged or in the process of being merged into the actual documentation. I don't know why Tux is here, but I'll let him stay. .-\"\"\"-. ' \\ |,. ,-. | |()L( ()| | |,' `\".| | |.___.',| ` .j `--\"' ` `. / ' ' \\ / / ` `. / / ` . / / l | . , | | ,\"`. .| | _.' ``. | `..-'l | `.`, | `. | `. __.j ) |__ |--\"\"___| ,-' `\"--...,+\"\"\"\" `._,.-' TODO \u00b6 Extend https://wiki.xmpp.org/web/Usability/Glossary Daniel\u2019s list \u00b6 What to name things? Common Jabber vocabulary for Groups, 'Jabber ID', bookmarks, \"MUC members / participants\" Persons; (preference of roster name, pep name, local sync name (address book). Persons in MUC (order of preference of room nick, roster name, pep name, \u2026) order of people in member list admins first?, alphabetical? (see affiliations) Groups / Chats (preference of description, subject, local part, name, bookmark name, auto generated name) do not get MUC name from identity name but from disco form fields because identity name is set to localpart on some servers Do we want to replace a referenced nick with the local version? Ad hoc, Impromptu group chat; come up with a cool default settings like members only, non-anon, allow pm?, allow subject change, allow invite. What to expose Behavioral changes in impromptu MUCs (send chat states, display read markers, e2ee by default, prefer 1:1 instead of PM when contacting a participant) and how to recognize and impromptu chat (isMemberOnly && isNonAnon) Affiliations Do we need an owner. Should in a three person chat someone be the 'owner' Administrators might make sense. But maybe we want to show owner and admin as the same. Maybe it makes sense to make everyone owner and then call owner the admin Do we need different profiles? Private, non-anon Public Announcements. w/o presence broadcast, moderated should those profiles be locked afterwards Do we want to keep bookmarks or just use it as a sync mechanism? open/close conversations when bookmark created / autojoin flag removed? do we also leave when bookmark is removed? Does that work? this basically means no join without bookmark. 'remove bookmark' (w/o leave) can not be an action anymore Naming things?! \u00b6 Jabber ID? JID? XMPP address? \"Jabber\" trademark \"JID\" widely used but might be a more technical term \"something address\" is clear to people \"XMPP\" is usually hard to remember, \"Jabber\" is more friendly to the ear Jabber is the community, XMPP is the protocol What about calling it \"Conversations ID\", or \"Converse ID\", or \"Movim ID\", all at the same time. Might be confusing for users when they use multiple clients but most don't. Some other protocols use \"username\" (with a hint for the default domain) Consensus: \"XMPP Address\"? (until another user-friendly term for \"XMPP\" can be found/agreed upon) Results / Consensus \u00b6 XMPP Address / Jabber ID \u00b6 XMPP Address input: Always use one field. Never split into localpart and domain part. If possible do auto-complete on the server part in drop down Group chats / channels: \u00b6 Private group chat (or groupchat) members only JID visibility: all MAM: yes not listed (non public) persistence users can invite. default off. (does this need to be configurable?) subject editability: owner only (probably make it configurable?) disallow pm Public channel public / everyone can join MAM: yes listed: yes persistent JID: visibility anonymous subject editability: admins only (probably make it configurable) Possibility to omit the words 'private' and 'public' later down the UI flow and just talk about 'groupchat' and 'channel' (for example when constrained on screen estate) recognize on members only AND visible JIDs AND not listed, everything else is a public channel. but a client should maybe warn before entering a public channel that makes your JID public. Those three 'detection properties' are immutable for private group chats private group chats use randomized, auto generated JID (always on the server\u2019s own MUC host) public channels always ask for bare JID on create (auto suggest of know MUC hosts) UI suggestion. ask for name first. Then normalize to local part of JID. But let user change the JID if they want to Group chats and channels should be clearly distinguished visually. Groupchat Channel Immutable for groupchats Members-only Yes No X Reveal JIDs Yes No X Publicly listed No Yes X Persistent Yes Yes MAM enabled Yes Yes Subject editable No No PMs No Yes X Terminology \u00b6 People in the group chat / channel: Participants Affiliations In groupchats In channels none N/A ** Guest member - - admin Admin (*) Admin owner Owner Owner Roles should not be used anymore. (*) A group chat will display an existing admin as such but it will not encourage/allow someone to be promoted to admin. UI options in group chats only allow a member to become an owner but not admin. So admins are discouraged by the UI but will be displayed as such if the end up being one for some reason. clients MAY create an 'advanced view' that displays roles as well. ** Everybody is a member in groupchats Suggested order of what to call an individual \u00b6 message: roster name, (address book), user nickname, localpart groupchat message: roster name, (address book), user nickname, resource (mentions refer to resource. if you do proper references you can live replace it with the 'nice' name) channel message: resource roster: roster name, user nickname, bare JID profile: roster name, user nickname, bare JID Avatar display should follow the same order Bookmarks \u00b6 Unbookmarking a bookmark doesn\u2019t do magic leave on any devices when receiving set/unset autojoin will join/leave on all devices leave/join will unset/set the autojoin flag (exposed as a choice to the user) clients should offer global sync-opt-out (Don\u2019t adhere to autojoin) clients should store the list of groupchats open, unrelated to the autojoined bookmarks Summary: clients store the list of open chats (groupchats or not) and restore it on next start; on receiving a bookmark with a new autojoin from PEP, add the room to that list and open it; on receiving one without an autojoin, remove it from that list and close it; on joining a room add an autojoin bookmark; on leaving a room ask whether to leave it globally (then remove the autojoin from the bookmark), or to leave it locally (then remove the bookmark). Places to update/remove \u00b6 https://wiki.xmpp.org/web/Usability/Glossary https://wiki.xmpp.org/web/Easy_Group_Chats","title":"UX Sprint (January 2019, Brussels)"},{"location":"meetings/2019-01-brussels/#ux-sprint-january-2019-brussels","text":"These are the archived notes from the Jan 2019 Brussels sprint, which focused primarily on discussing various UX issues facing the community as a whole. There is an associated wiki page . The notes were taken in real-time by volunteers during the discussions. As such, they are far from editorially perfect, and are not intended as documentation. Relevant items around which consensus was formed are either already merged or in the process of being merged into the actual documentation. I don't know why Tux is here, but I'll let him stay. .-\"\"\"-. ' \\ |,. ,-. | |()L( ()| | |,' `\".| | |.___.',| ` .j `--\"' ` `. / ' ' \\ / / ` `. / / ` . / / l | . , | | ,\"`. .| | _.' ``. | `..-'l | `.`, | `. | `. __.j ) |__ |--\"\"___| ,-' `\"--...,+\"\"\"\" `._,.-'","title":"UX Sprint (January 2019, Brussels)"},{"location":"meetings/2019-01-brussels/#todo","text":"Extend https://wiki.xmpp.org/web/Usability/Glossary","title":"TODO"},{"location":"meetings/2019-01-brussels/#daniels-list","text":"What to name things? Common Jabber vocabulary for Groups, 'Jabber ID', bookmarks, \"MUC members / participants\" Persons; (preference of roster name, pep name, local sync name (address book). Persons in MUC (order of preference of room nick, roster name, pep name, \u2026) order of people in member list admins first?, alphabetical? (see affiliations) Groups / Chats (preference of description, subject, local part, name, bookmark name, auto generated name) do not get MUC name from identity name but from disco form fields because identity name is set to localpart on some servers Do we want to replace a referenced nick with the local version? Ad hoc, Impromptu group chat; come up with a cool default settings like members only, non-anon, allow pm?, allow subject change, allow invite. What to expose Behavioral changes in impromptu MUCs (send chat states, display read markers, e2ee by default, prefer 1:1 instead of PM when contacting a participant) and how to recognize and impromptu chat (isMemberOnly && isNonAnon) Affiliations Do we need an owner. Should in a three person chat someone be the 'owner' Administrators might make sense. But maybe we want to show owner and admin as the same. Maybe it makes sense to make everyone owner and then call owner the admin Do we need different profiles? Private, non-anon Public Announcements. w/o presence broadcast, moderated should those profiles be locked afterwards Do we want to keep bookmarks or just use it as a sync mechanism? open/close conversations when bookmark created / autojoin flag removed? do we also leave when bookmark is removed? Does that work? this basically means no join without bookmark. 'remove bookmark' (w/o leave) can not be an action anymore","title":"Daniel\u2019s list"},{"location":"meetings/2019-01-brussels/#naming-things","text":"Jabber ID? JID? XMPP address? \"Jabber\" trademark \"JID\" widely used but might be a more technical term \"something address\" is clear to people \"XMPP\" is usually hard to remember, \"Jabber\" is more friendly to the ear Jabber is the community, XMPP is the protocol What about calling it \"Conversations ID\", or \"Converse ID\", or \"Movim ID\", all at the same time. Might be confusing for users when they use multiple clients but most don't. Some other protocols use \"username\" (with a hint for the default domain) Consensus: \"XMPP Address\"? (until another user-friendly term for \"XMPP\" can be found/agreed upon)","title":"Naming things?!"},{"location":"meetings/2019-01-brussels/#results-consensus","text":"","title":"Results / Consensus"},{"location":"meetings/2019-01-brussels/#xmpp-address-jabber-id","text":"XMPP Address input: Always use one field. Never split into localpart and domain part. If possible do auto-complete on the server part in drop down","title":"XMPP Address / Jabber ID"},{"location":"meetings/2019-01-brussels/#group-chats-channels","text":"Private group chat (or groupchat) members only JID visibility: all MAM: yes not listed (non public) persistence users can invite. default off. (does this need to be configurable?) subject editability: owner only (probably make it configurable?) disallow pm Public channel public / everyone can join MAM: yes listed: yes persistent JID: visibility anonymous subject editability: admins only (probably make it configurable) Possibility to omit the words 'private' and 'public' later down the UI flow and just talk about 'groupchat' and 'channel' (for example when constrained on screen estate) recognize on members only AND visible JIDs AND not listed, everything else is a public channel. but a client should maybe warn before entering a public channel that makes your JID public. Those three 'detection properties' are immutable for private group chats private group chats use randomized, auto generated JID (always on the server\u2019s own MUC host) public channels always ask for bare JID on create (auto suggest of know MUC hosts) UI suggestion. ask for name first. Then normalize to local part of JID. But let user change the JID if they want to Group chats and channels should be clearly distinguished visually. Groupchat Channel Immutable for groupchats Members-only Yes No X Reveal JIDs Yes No X Publicly listed No Yes X Persistent Yes Yes MAM enabled Yes Yes Subject editable No No PMs No Yes X","title":"Group chats / channels:"},{"location":"meetings/2019-01-brussels/#terminology","text":"People in the group chat / channel: Participants Affiliations In groupchats In channels none N/A ** Guest member - - admin Admin (*) Admin owner Owner Owner Roles should not be used anymore. (*) A group chat will display an existing admin as such but it will not encourage/allow someone to be promoted to admin. UI options in group chats only allow a member to become an owner but not admin. So admins are discouraged by the UI but will be displayed as such if the end up being one for some reason. clients MAY create an 'advanced view' that displays roles as well. ** Everybody is a member in groupchats","title":"Terminology"},{"location":"meetings/2019-01-brussels/#suggested-order-of-what-to-call-an-individual","text":"message: roster name, (address book), user nickname, localpart groupchat message: roster name, (address book), user nickname, resource (mentions refer to resource. if you do proper references you can live replace it with the 'nice' name) channel message: resource roster: roster name, user nickname, bare JID profile: roster name, user nickname, bare JID Avatar display should follow the same order","title":"Suggested order of what to call an individual"},{"location":"meetings/2019-01-brussels/#bookmarks","text":"Unbookmarking a bookmark doesn\u2019t do magic leave on any devices when receiving set/unset autojoin will join/leave on all devices leave/join will unset/set the autojoin flag (exposed as a choice to the user) clients should offer global sync-opt-out (Don\u2019t adhere to autojoin) clients should store the list of groupchats open, unrelated to the autojoined bookmarks Summary: clients store the list of open chats (groupchats or not) and restore it on next start; on receiving a bookmark with a new autojoin from PEP, add the room to that list and open it; on receiving one without an autojoin, remove it from that list and close it; on joining a room add an autojoin bookmark; on leaving a room ask whether to leave it globally (then remove the autojoin from the bookmark), or to leave it locally (then remove the bookmark).","title":"Bookmarks"},{"location":"meetings/2019-01-brussels/#places-to-updateremove","text":"https://wiki.xmpp.org/web/Usability/Glossary https://wiki.xmpp.org/web/Easy_Group_Chats","title":"Places to update/remove"},{"location":"projects/portability/","text":"XMPP Account Portability \u00b6 The XMPP Account Portability project is standardizing a way to migrate a user\u2019s account data from one XMPP-based service provider or software to another. The project will develop and publish a suitable protocol and data format via the XMPP Standards Foundation \u2019s standards process, as well as a reference implementation. Finally, the work will be integrated into Snikket , a suite of XMPP-based open-source communication software. Updates April 2021: Read the project announcement on the Snikket blog ! May 2021: Research and document drafting. June 2021: XEP-0227 revision 1.1 has been submitted to the XSF. A new proto-XEP \"Moved 2.0\" has also been submitted . Both submissions are awaiting approval from the XSF technical council . July 2021: A beta web-based XMPP account migrator is now online! Credits This project has received funding from the European Union's H2020 research and innovation programme under Grant Agreement no 871498","title":"Account portability"},{"location":"projects/portability/#xmpp-account-portability","text":"The XMPP Account Portability project is standardizing a way to migrate a user\u2019s account data from one XMPP-based service provider or software to another. The project will develop and publish a suitable protocol and data format via the XMPP Standards Foundation \u2019s standards process, as well as a reference implementation. Finally, the work will be integrated into Snikket , a suite of XMPP-based open-source communication software. Updates April 2021: Read the project announcement on the Snikket blog ! May 2021: Research and document drafting. June 2021: XEP-0227 revision 1.1 has been submitted to the XSF. A new proto-XEP \"Moved 2.0\" has also been submitted . Both submissions are awaiting approval from the XSF technical council . July 2021: A beta web-based XMPP account migrator is now online!","title":"XMPP Account Portability"}]}